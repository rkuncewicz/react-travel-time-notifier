{
  "name": "recordrtc",
  "preferGlobal": false,
  "version": "5.1.3",
  "author": {
    "name": "Muaz Khan",
    "email": "muazkh@gmail.com",
    "url": "http://www.muazkhan.com/"
  },
  "description": "RecordRTC is a server-less (entire client-side) JavaScript library can be used to record WebRTC audio/video media streams. It supports cross-browser audio/video recording.",
  "scripts": {
    "start": "node RecordRTC.js"
  },
  "main": "./RecordRTC.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/muaz-khan/RecordRTC.git"
  },
  "keywords": [
    "webrtc",
    "recordrtc",
    "audio-recording",
    "video-recording",
    "gif-recording",
    "audio/video recording"
  ],
  "analyze": false,
  "license": "MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/muaz-khan/RecordRTC/issues",
    "email": "muazkh@gmail.com"
  },
  "homepage": "http://RecordRTC.org/",
  "_id": "recordrtc@5.1.3",
  "_from": "git+https://github.com/muaz-khan/RecordRTC.git#ec07f465bf37084dd49326e252e3463dd592e42c",
  "devDependencies": {
    "grunt": "latest",
    "grunt-cli": "latest",
    "load-grunt-tasks": "latest",
    "grunt-contrib-concat": "latest",
    "grunt-contrib-csslint": "latest",
    "grunt-contrib-jshint": "latest",
    "grunt-contrib-uglify": "latest",
    "grunt-htmlhint": "latest",
    "grunt-jsbeautifier": "latest",
    "grunt-bump": "latest"
  },
  "gitHead": "ec07f465bf37084dd49326e252e3463dd592e42c",
  "readme": "# [RecordRTC](https://github.com/muaz-khan/RecordRTC): [WebRTC](https://www.webrtc-experiment.com/) audio/video recording\n\n[RecordRTC Documentation](http://RecordRTC.org/) / [RecordRTC Wiki Pages](https://github.com/muaz-khan/RecordRTC/wiki) / [RecordRTC Demo](https://www.webrtc-experiment.com/RecordRTC/) / [WebRTC Experiments](https://www.webrtc-experiment.com/)\n\n[![npm](https://img.shields.io/npm/v/recordrtc.svg)](https://npmjs.org/package/recordrtc) [![downloads](https://img.shields.io/npm/dm/recordrtc.svg)](https://npmjs.org/package/recordrtc) [![Build Status: Linux](https://travis-ci.org/muaz-khan/RecordRTC.png?branch=master)](https://travis-ci.org/muaz-khan/RecordRTC)\n\n> [RecordRTC](https://www.webrtc-experiment.com/RecordRTC/) is a JavaScript-based media-recording library for modern web-browsers (supporting WebRTC getUserMedia API). It is optimized for different devices and browsers to bring all client-side (pluginfree) recording solutions in single place.\n\n# Check all releases:\n\n* https://github.com/muaz-khan/RecordRTC/releases\n\nPlease check [dev](https://github.com/muaz-khan/RecordRTC/tree/master/dev) directory for development files.\n\n1. [RecordRTC API Reference](http://RecordRTC.org/RecordRTC.html)\n2. [MRecordRTC API Reference](http://RecordRTC.org/MRecordRTC.html)\n3. [MediaStreamRecorder API Reference](http://RecordRTC.org/MediaStreamRecorder.html)\n5. [StereoAudioRecorder API Reference](http://RecordRTC.org/StereoAudioRecorder.html)\n6. [WhammyRecorder API Reference](http://RecordRTC.org/WhammyRecorder.html)\n7. [Whammy API Reference](http://RecordRTC.org/Whammy.html)\n8. [CanvasRecorder API Reference](http://RecordRTC.org/CanvasRecorder.html)\n9. [GifRecorder API Reference](http://RecordRTC.org/GifRecorder.html)\n10. [Global API Reference](http://RecordRTC.org/global.html)\n\n## Browsers Support:\n\n| Browser        | Support           |\n| ------------- |-------------|\n| Firefox | [Stable](http://www.mozilla.org/en-US/firefox/new/) / [Aurora](http://www.mozilla.org/en-US/firefox/aurora/) / [Nightly](http://nightly.mozilla.org/) |\n| Google Chrome | [Stable](https://www.google.com/intl/en_uk/chrome/browser/) / [Canary](https://www.google.com/intl/en/chrome/browser/canary.html) / [Beta](https://www.google.com/intl/en/chrome/browser/beta.html) / [Dev](https://www.google.com/intl/en/chrome/browser/index.html?extra=devchannel#eula) |\n| Opera | [Stable](http://www.opera.com/) / [NEXT](http://www.opera.com/computer/next)  |\n| Android | [Chrome](https://play.google.com/store/apps/details?id=com.chrome.beta&hl=en) / [Firefox](https://play.google.com/store/apps/details?id=org.mozilla.firefox) / [Opera](https://play.google.com/store/apps/details?id=com.opera.browser) |\n| Microsoft Edge | [Normal Build](https://www.microsoft.com/en-us/windows/microsoft-edge) |\n\n## How RecordRTC encodes wav/webm?\n\n|Media File|Bitrate/Framerate|encoders|Framesize|additional info|\n| ------------- |-------------|-------------|-------------|-------------|\n|Audio File (WAV) | 1411 kbps | pcm_s16le |44100 Hz|stereo, s16|\n|Video File (WebM)|60 kb/s | (whammy) vp8 codec yuv420p|--|SAR 1:1 DAR 4:3, 1k tbr, 1k tbn, 1k tbc (default)|\n\n## RecordRTC Demos\n\n1. [RecordRTC to Node.js](https://github.com/muaz-khan/WebRTC-Experiment/tree/master/RecordRTC/RecordRTC-to-Nodejs)\n2. [RecordRTC to PHP](https://github.com/muaz-khan/WebRTC-Experiment/tree/master/RecordRTC/RecordRTC-to-PHP)\n3. [RecordRTC to ASP.NET MVC](https://github.com/muaz-khan/WebRTC-Experiment/tree/master/RecordRTC/RecordRTC-to-ASPNETMVC)\n4. [RecordRTC & HTML-2-Canvas i.e. Canvas/HTML Recording!](https://github.com/muaz-khan/WebRTC-Experiment/tree/master/RecordRTC/Canvas-Recording)\n5. [MRecordRTC i.e. Multi-RecordRTC!](https://github.com/muaz-khan/WebRTC-Experiment/tree/master/RecordRTC/MRecordRTC)\n6. [RecordRTC on Ruby!](https://github.com/cbetta/record-rtc-experiment)\n7. [RecordRTC over Socket.io](https://github.com/muaz-khan/WebRTC-Experiment/tree/master/RecordRTC/RecordRTC-over-Socketio)\n8. [ffmpeg-asm.js and RecordRTC! Audio/Video Merging & Transcoding!](https://github.com/muaz-khan/WebRTC-Experiment/tree/master/ffmpeg)\n9. [RecordRTC / PHP / FFmpeg](https://github.com/muaz-khan/WebRTC-Experiment/tree/master/RecordRTC/PHP-and-FFmpeg)\n10. [Record Audio and upload to Nodejs server](https://www.npmjs.org/package/record-audio)\n11. [ConcatenateBlobs.js](https://github.com/muaz-khan/ConcatenateBlobs) - Concatenate multiple recordings in single Blob!\n12. [Remote stream recording](https://www.webrtc-experiment.com/demos/remote-stream-recording.html)\n13. [Mp3 or Wav Recording](https://www.webrtc-experiment.com/RecordRTC/Record-Mp3-or-Wav.html)\n\n## How to link?\n\n```\nnpm install recordrtc\n\n# you can use with \"require\" (browserify/nodejs)\nvar RecordRTC = require('recordrtc');\nvar recorder = RecordRTC(mediaStream, { type: 'audio'});\n```\n\nor using [Bower](http://bower.io):\n\n```\nbower install recordrtc\n```\n\nTo use it:\n\n```html\n<script src=\"./node_modules/recordrtc/RecordRTC.js\"></script>\n\n<!-- or -->\n<script src=\"//cdn.WebRTC-Experiment.com/RecordRTC.js\"></script>\n\n<!-- or -->\n<script src=\"//www.WebRTC-Experiment.com/RecordRTC.js\"></script>\n```\n\nThere are some other NPM packages regarding RecordRTC:\n\n* [https://www.npmjs.org/search?q=RecordRTC](https://www.npmjs.org/search?q=RecordRTC)\n\n## How to capture stream?\n\n```html\n<script src=\"https://cdn.rawgit.com/webrtc/adapter/master/adapter.js\"></script>\n\n<script>\nfunction successCallback(stream) {\n    // RecordRTC usage goes here\n}\n\nfunction errorCallback(errror) {\n    // maybe another application is using the device\n}\n\nvar mediaConstraints = { video: true, audio: true };\n\nnavigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);\n</script>\n```\n\n## Record audio+video in Firefox\n\nYou'll be recording both audio/video in single WebM container. Though you can edit RecordRTC.js to record in mp4.\n\n```javascript\nvar recordRTC;\n\nfunction successCallback(stream) {\n    // RecordRTC usage goes here\n\n    var options = {\n      mimeType: 'video/webm', // or video/mp4 or audio/ogg\n      audioBitsPerSecond: 128000,\n      videoBitsPerSecond: 128000,\n      bitsPerSecond: 128000 // if this line is provided, skip above two\n    };\n    recordRTC = RecordRTC(MediaStream);\n    recordRTC.startRecording();\n}\n\nfunction errorCallback(errror) {\n    // maybe another application is using the device\n}\n\nvar mediaConstraints = { video: true, audio: true };\n\nnavigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);\n\nbtnStopRecording.onclick = function () {\n    recordRTC.stopRecording(function (audioVideoWebMURL) {\n        video.src = audioVideoWebMURL;\n\n        var recordedBlob = recordRTC.getBlob();\n        recordRTC.getDataURL(function(dataURL) { });\n    });\n};\n```\n\nDemo: [AudioVideo-on-Firefox.html](https://www.webrtc-experiment.com/RecordRTC/AudioVideo-on-Firefox.html)\n\n## Record only Audio\n\n```javascript\nvar recordRTC = RecordRTC(mediaStream);\nrecordRTC.startRecording();\nrecordRTC.stopRecording(function(audioURL) {\n    audio.src = audioURL;\n\n    var recordedBlob = recordRTC.getBlob();\n    recordRTC.getDataURL(function(dataURL) { });\n});\n```\n\n## Echo Issues\n\nSimply set `volume=0` or `muted=true` over `<audio>` or `<video>` element:\n\n```javascript\nvideoElement.muted = true;\naudioElement.muted = true;\n```\n\nOtherwise, you can pass some media constraints:\n\n```javascript\nfunction successCallback(stream) {\n    // RecordRTC usage goes here\n}\n\nfunction errorCallback(errror) {\n    // maybe another application is using the device\n}\n\nvar mediaConstraints = {\n    audio: {\n        mandatory: {\n            echoCancellation: false,\n            googAutoGainControl: false,\n            googNoiseSuppression: false,\n            googHighpassFilter: false\n        },\n        optional: [{\n          googAudioMirroring: false\n        }]\n    },\n};\n\nnavigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);\n```\n\n* [Constraints Reference](https://chromium.googlesource.com/external/webrtc/+/master/talk/app/webrtc/mediaconstraintsinterface.cc)\n\n## Record Video\n\nEverything is optional except `type:'video'`:\n\n```javascript\nvar options = {\n   type: 'video',\n   frameInterval: 20 // minimum time between pushing frames to Whammy (in milliseconds)\n};\nvar recordRTC = RecordRTC(mediaStream, options);\nrecordRTC.startRecording();\nrecordRTC.stopRecording(function(videoURL) {\n    video.src = videoURL;\n\n    var recordedBlob = recordRTC.getBlob();\n    recordRTC.getDataURL(function(dataURL) { });\n});\n```\n\n## Record animated GIF image\n\nEverything is optional except `type:'gif'`:\n\n```javascript\n// you must \"manually\" link:\n// https://cdn.webrtc-experiment.com/gif-recorder.js\n\nvar options = {\n   type: 'gif',\n   frameRate: 200,\n   quality: 10\n};\nvar recordRTC = RecordRTC(mediaStream || canvas || context, options);\nrecordRTC.startRecording();\nrecordRTC.stopRecording(function(gifURL) {\n   mediaElement.src = gifURL;\n});\n```\n\n## Record a Webpage\n\nYou can say it: \"HTML/Canvas Recording using RecordRTC\"!\n\n```html\n<script src=\"//cdn.WebRTC-Experiment.com/RecordRTC.js\"></script>\n<script src=\"//cdn.webrtc-experiment.com/screenshot.js\"></script>\n\n<div id=\"elementToShare\" style=\"width:100%;height:100%;background:green;\"></div>\n<script>\nvar elementToShare = document.getElementById('elementToShare');\nvar recordRTC = RecordRTC(elementToShare, {\n    type: 'canvas'\n});\nrecordRTC.startRecording();\nrecordRTC.stopRecording(function(videoURL) {\n    video.src = videoURL;\n\n    var recordedBlob = recordRTC.getBlob();\n    recordRTC.getDataURL(function(dataURL) { });\n});\n</script>\n```\n\nSee a demo: [/Canvas-Recording/](https://www.webrtc-experiment.com/RecordRTC/Canvas-Recording/)\n\n# API Reference\n\n## `initRecorder`\n\nIt is a function that can be used to initiate recorder however skip getting recording outputs. It will provide maximum accuracy in the outputs after using `startRecording` method. Here is how to use it:\n\n```javascript\nvar audioRecorder = RecordRTC(mediaStream, {\n  recorderType: StereoAudioRecorder\n});\n\nvar videoRecorder = RecordRTC(mediaStream, {\n  recorderType: WhammyRecorder\n});\n\nvideoRecorder.initRecorder(function() {\n  audioRecorder.initRecorder(function() {\n    // Both recorders are ready to record things accurately\n    videoRecorder.startRecording();\n    audioRecorder.startRecording();\n  });\n});\n```\n\nAfter using `stopRecording`, you'll see that both WAV/WebM blobs are having following charachteristics:\n\n1. Both are having same recording duration i.e. length\n2. Video recorder is having no blank frames\n3. Audio recorder is having no empty buffers\n\nThis method is really useful to sync audio/video outputs.\n\n## `setRecordingDuration`\n\nYou can ask RecordRTC to auto stop recording after specific duration. It accepts one mandatory and one optional argument:\n\n```javascript\nrecordRTC.setRecordingDuration(milliseconds, stoppedCallback);\n\n// the easiest one:\nrecordRTC.setRecordingDuration(milliseconds).onRecordingStopped(stoppedCallback);\n```\n\nTry a simple demo; paste in the chrome console:\n\n```javascript\nnavigator.mediaDevices.getUserMedia({\n    video: true\n}).then(function(stream) {\n    var recordRTC = RecordRTC(stream, {\n        recorderType: WhammyRecorder\n    });\n\n    // auto stop recording after 5 seconds\n    recordRTC.setRecordingDuration(5 * 1000).onRecordingStopped(function(url) {\n        console.debug('setRecordingDuration', url);\n        window.open(url);\n    })\n\n    recordRTC.startRecording();\n}).catch(function(error) {\n    console.error(error);\n});\n```\n\n## `clearRecordedData`\n\nThis method can be used to clear old recorded frames/buffers. Snippet:\n\n```javascript\nrecorder.clearRecordedData();\n```\n\n## `recorderType`\n\nIf you're using `recorderType` then you don't need to use `type`. Second one will be redundant i.e. skipped.\n\nYou can force any Recorder by passing this object over RecordRTC constructor:\n\n```javascript\nvar audioRecorder = RecordRTC(mediaStream, {\n  recorderType: StereoAudioRecorder\n})\n```\n\nIt means that ALL_BROWSERS will be using [StereoAudioRecorder](http://RecordRTC.org/StereoAudioRecorder.html) i.e. WebAudio API for audio recording.\n\nThis feature brings remote audio recording support in Firefox, and local audio recording support in Microsoft Edge.\n\nYou can even force `WhammyRecorder` on Firefox however webp format isn't yet supported in standard Firefox builds. It simply means that, you're skipping MediaRecorder API in Firefox.\n\n## `type`\n\nIf you are NOT using `recorderType` parameter then `type` parameter can be used to ask RecordRTC choose best recorder-type for recording.\n\n```javascript\n// if it is Firefox, then RecordRTC will be using MediaStreamRecorder.js\n// if it is Chrome or Opera, then RecordRTC will be using WhammyRecorder.js\nvar recordVideo = RecordRTC(mediaStream, {\n  type: 'video'\n});\n\n// if it is Firefox, then RecordRTC will be using MediaStreamRecorder.js\n// if it is Chrome or Opera or Edge, then RecordRTC will be using StereoAudioRecorder.js\nvar recordVideo = RecordRTC(mediaStream, {\n  type: 'audio'\n});\n```\n\n## `frameInterval`\n\nSet minimum interval (in milliseconds) between each time we push a frame to Whammy recorder.\n\n```javascript\nvar whammyRecorder = RecordRTC(videoStream, {\n  recorderType: WhammyRecorder,\n  frameInterval: 1   // setTimeout interval\n});\n```\n\n## `disableLogs`\n\nYou can disable all the RecordRTC logs by passing this Boolean:\n\n```javascript\nvar recorder = RecordRTC(mediaStream, {\n  disableLogs: true\n});\n```\n\n## `numberOfAudioChannels`\n\nYou can force [StereoAudioRecorder](http://RecordRTC.org/StereoAudioRecorder.html) to record single-audio-channel only. It allows you reduce WAV file size to half.\n\n```javascript\nvar audioRecorder = RecordRTC(audioStream, {\n  recorderType: StereoAudioRecorder,\n  numberOfAudioChannels: 1 // or leftChannel:true\n});\n```\n\n**It will reduce WAV size to half!**\n\nThis feature is useful only in Chrome and Microsoft Edge (WAV-recorders). It can work in Firefox as well.\n\n## How to set video width/height?\n\n```javascript\nvar options = {\n   type: 'video',\n   video: {\n      width: 320,\n      height: 240\n   },\n   canvas: {\n      width: 320,\n      height: 240\n   }\n};\n\nvar recordVideo = RecordRTC(MediaStream, options);\n```\n\n## `pauseRecording`\n\nRecordRTC pauses recording buffers/frames.\n\n```javascript\nrecordRTC.pauseRecording();\n```\n\n## `resumeRecording`\n\nIf you're using \"initRecorder\" then it asks RecordRTC that now its time to record buffers/frames. Otherwise, it asks RecordRTC to not only initialize recorder but also record buffers/frames.\n\n```javascript\nrecordRTC.resumeRecording();\n```\n\n## `getDataURL`\n\nOptionally get \"DataURL\" object instead of \"Blob\".\n\n```javascript\nrecordRTC.getDataURL(function(dataURL) {\n   mediaElement.src = dataURL;\n});\n```\n\n## `getBlob`\n\nGet \"Blob\" object. A blob object looks similar to `input[type=file]`. Which means that you can append it to `FormData` and upload to server using XMLHttpRequest object. Even socket.io nowadays supports blob-transmission.\n\n```javascript\nblob = recordRTC.getBlob();\n```\n\n## `toURL`\n\nA virtual URL. It can be used only inside the same browser. You can't share it. It is just providing a preview of the recording.\n\n```javascript\nwindow.open( recordRTC.toURL() );\n```\n\n## `save`\n\nInvoke save-as dialog. You can pass \"fileName\" as well; though fileName argument is optional.\n\n```javascript\nrecordRTC.save('File Name');\n```\n\n## `bufferSize`\n\nHere is how to customize Buffer-Size for audio recording?\n\n```javascript\n// From the spec: This value controls how frequently the audioprocess event is\n// dispatched and how many sample-frames need to be processed each call.\n// Lower values for buffer size will result in a lower (better) latency.\n// Higher values will be necessary to avoid audio breakup and glitches\n// bug: how to minimize wav size?\n// workaround? obviously ffmpeg!\n// The size of the buffer (in sample-frames) which needs to\n// be processed each time onprocessaudio is called.\n\n// Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\n\nvar options = {\n   bufferSize: 16384\n};\nvar recordRTC = RecordRTC(audioStream, options);\n```\n\nFollowing values are allowed for buffer-size:\n\n```javascript\n// Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384)\n```\n\nIf you passed invalid value then you'll get blank audio.\n\n## `sampleRate`\n\nHere is jow to customize Sample-Rate for audio recording?\n\n```javascript\n// The sample rate (in sample-frames per second) at which the\n// AudioContext handles audio. It is assumed that all AudioNodes\n// in the context run at this rate. In making this assumption,\n// sample-rate converters or \"varispeed\" processors are not supported\n// in real-time processing.\n// The sampleRate parameter describes the sample-rate of the\n// linear PCM audio data in the buffer in sample-frames per second.\n\n// An implementation must support sample-rates in at least\n// the range 22050 to 96000.\n\nvar options = {\n   sampleRate: 96000\n};\nvar recordRTC = RecordRTC(audioStream, options);\n```\n\nValues for sample-rate must be greater than or equal to 22050 and less than or equal to 96000.\n\nIf you passed invalid value then you'll get blank audio.\n\nYou can pass custom sample-rate values only on Mac (or additionally maybe on Windows 10).\n\n## `mimeType`\n\nThis option allows you set MediaRecorder output format (currently works only in Firefox; Chrome support coming soon):\n\n```javascript\nvar options = {\n  mimeType 'video/webm', // or video/mp4 or audio/ogg\n  bitsPerSecond: 128000\n};\nvar recorder = RecordRTC(mediaStream, options);\n```\n\nNote: For chrome, it will simply auto-set `type:audio or video` parameters to keep supporting `StereoAudioRecorder.js` and `WhammyRecorder.js`.\n\nThat is, you can skip passing `type:audio` parameter when you're using `mimeType` parameter.\n\n## `bitsPerSecond`\n\nThe chosen bitrate for the audio and video components of the media. If this is specified along with one or the other of the above properties, this will be used for the one that isn't specified.\n\n```javascript\nvar options = {\n  mimeType 'video/webm', // or video/mp4 or audio/ogg\n  bitsPerSecond: 128000\n};\nvar recorder = RecordRTC(mediaStream, options);\n```\n\n## `audioBitsPerSecond`\n\nThe chosen bitrate for the audio component of the media.\n\n```javascript\nvar options = {\n  mimeType 'audio/ogg',\n  audioBitsPerSecond: 128000\n};\nvar recorder = RecordRTC(mediaStream, options);\n```\n\n## `videooBitsPerSecond`\n\nThe chosen bitrate for the video component of the media.\n\n```javascript\nvar options = {\n  mimeType 'video/webm', // or video/mp4\n  videooBitsPerSecond: 128000\n};\nvar recorder = RecordRTC(mediaStream, options);\n```\n\n## `onAudioProcessStarted`\n\nNote: \"initRecorder\" is preferred over this old hack. Both works similarly.\n\nUseful to recover audio/video sync issues inside the browser:\n\n```javascript\nrecordAudio = RecordRTC( stream, {\n     onAudioProcessStarted: function( ) {\n         recordVideo.startRecording();\n     }\n});\n\nrecordVideo = RecordRTC(stream, {\n    type: 'video'\n});\n\nrecordAudio.startRecording();\n```\n\n`onAudioProcessStarted` fixes shared/exclusive audio gap (a little bit). Because shared audio sometimes causes 100ms delay...\nsometime about 400-to-500 ms delay.\nDelay depends upon number of applications concurrently requesting same audio devices and CPU/Memory available.\nShared mode is the only mode currently available on 90% of windows systems especially on windows 7.\n\n## `autoWriteToDisk`\n\nUsing `autoWriteToDisk`; you can suggest RecordRTC to auto-write to indexed-db as soon as you call `stopRecording` method.\n\n```javascript\nvar recordRTC = RecordRTC(MediaStream, {\n    autoWriteToDisk: true\n});\n```\n\n`autoWriteToDisk` is helpful for single stream recording and writing to disk; however for `MRecordRTC`; `writeToDisk` is preferred one.\n\n## `writeToDisk`\n\nYou can write recorded blob to disk using `writeToDisk` method:\n\n```javascript\nrecordRTC.stopRecording();\nrecordRTC.writeToDisk();\n```\n\n## `getFromDisk`\n\nYou can get recorded blob from disk using `getFromDisk` method:\n\n```javascript\n// get all blobs from disk\nRecordRTC.getFromDisk('all', function(dataURL, type) {\n   type == 'audio'\n   type == 'video'\n   type == 'gif'\n});\n\n// or get just single blob\nRecordRTC.getFromDisk('audio', function(dataURL) {\n   // only audio blob is returned from disk!\n});\n```\n\nFor [MRecordRTC](https://RecordRTC.org/MRecordRTC.html); you can use word `MRecordRTC` instead of `RecordRTC`!\n\nAnother possible situation!\n\n```javascript\nvar recordRTC = RecordRTC(mediaStream);\nrecordRTC.startRecording();\nrecordRTC.stopRecording(function(audioURL) {\n   mediaElement.src = audioURL;\n});\n\n// \"recordRTC\" instance object to invoke \"getFromDisk\" method!\nrecordRTC.getFromDisk(function(dataURL) {\n   // audio blob is automaticlaly returned from disk!\n});\n```\n\nIn the above example; you can see that `recordRTC` instance object is used instead of global `RecordRTC` object.\n\n# Clarifications\n\n## Is WinXP supported?\n\nNo WinXP SP2 based \"Chrome\" support. However, RecordRTC works on WinXP Service Pack 3.\n\n## Is Chrome on Android supported?\n\nRecordRTC uses WebAudio API for stereo-audio recording. AFAIK, WebAudio is not supported on android chrome releases, yet.\n\nFirefox merely supports audio-recording on Android devices.\n\n## Stereo or Mono?\n\nAudio recording fails for `mono` audio. So, try `stereo` audio only.\n\nMediaRecorder API (in Firefox) seems using mono-audio-recording instead.\n\n## Possible issues/failures:\n\n**This section applies only to StereoAudioRecorder:**\n\nDo you know \"RecordRTC\" fails recording audio because following conditions fails:\n\n1. Sample rate and channel configuration must be the same for input and output sides on Windows i.e. audio input/output devices mismatch\n2. Only the Default microphone device can be used for capturing.\n3. The requesting scheme is none of the following: http, https, chrome, extension's, or file (only works with `--allow-file-access-from-files`)\n4. The browser cannot create/initialize the metadata database for the API under the profile directory\n\nIf you see this error message: `Uncaught Error: SecurityError: DOM Exception 18`; it means that you're using `HTTP`; whilst your webpage is loading worker file (i.e. `audio-recorder.js`) from `HTTPS`. Both files's (i.e. `RecordRTC.js` and `audio-recorder.js`) scheme MUST be same!\n\n## Web Audio APIs requirements\n\n1. If you're on Windows, you have to be running WinXP SP3, Windows Vista or better (will not work on Windows XP SP2 or earlier).\n2. On Windows, audio input hardware must be set to the same sample rate as audio output hardware.\n3. On Mac and Windows, the audio input device must be at least stereo (i.e. a mono/single-channel USB microphone WILL NOT work).\n\n## Why stereo?\n\nIf you explorer chromium code; you'll see that some APIs can only be successfully called for `WAV` files with `stereo` audio.\n\nStereo audio is only supported for WAV files.\n\nRecordRTC is unable to record \"mono\" audio on chrome; however it seems that we can covert channels from \"stereo\" to \"mono\" using WebAudio API, though. MediaRecorder API's encoder only support 48k/16k mono audio channel (on Firefox Nightly).\n\n## Credits\n\n1. [Recorderjs](https://github.com/mattdiamond/Recorderjs) for audio recording\n2. [whammy](https://github.com/antimatter15/whammy) for video recording\n3. [jsGif](https://github.com/antimatter15/jsgif) for gif recording\n\n## Spec & Reference\n\n1. [Web Audio API](https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html)\n2. [MediaRecorder](https://wiki.mozilla.org/Gecko:MediaRecorder)\n3. [Canvas2D](http://www.w3.org/html/wg/drafts/2dcontext/html5_canvas/)\n4. [MediaStream Recording](https://dvcs.w3.org/hg/dap/raw-file/tip/media-stream-capture/MediaRecorder.html)\n5. [Media Capture and Streams](http://www.w3.org/TR/mediacapture-streams/)\n\n## Contribute in [RecordRTC.org](http://RecordRTC.org) domain\n\nThe domain www.RecordRTC.org is open-sourced here:\n\n* https://github.com/muaz-khan/RecordRTC/tree/gh-pages\n\n## License\n\n[RecordRTC.js](https://github.com/muaz-khan/RecordRTC) is released under [MIT licence](https://www.webrtc-experiment.com/licence/) . Copyright (c) [Muaz Khan](http://www.MuazKhan.com).\n",
  "_shasum": "46d721c9308f795d9012629c9ba672da042fc5fd",
  "_resolved": "git+https://github.com/muaz-khan/RecordRTC.git#ec07f465bf37084dd49326e252e3463dd592e42c"
}
